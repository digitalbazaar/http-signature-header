#!/usr/bin/env node

const program = require('commander');
const httpSigs = require('../lib/');
const fs = require('fs');

program
  .command('sign')
  .alias('S')
  .option('-h, --headers <headers>', 'Headers for the signature.')
  .option('-o, --requestOptions <requestOptions>',
    'Optional Options for the request.')
  .action(async cmd => {
    try {
      const date = new Date().toUTCString();
      const defaultOptions = {
        headers: {date},
        method: 'GET',
        url: 'https://example.com',
      };
      const requestOptions = cmd.requestOptions ?
        getJsonFile(cmd.requestOptions) : defaultOptions;
      if(!cmd.headers) {throw new Error('--headers required');}
      const includeHeaders = getJsonFile(cmd.headers);
      const result = httpSigs.
        createSignatureString({includeHeaders, requestOptions});
      console.log(JSON.stringify(result));
    } catch(e) {
      console.error('Error:', JSON.stringify(e, null, e), e);
      process.exit(1);
    }
  });

program
  .command('authz')
  .alias('A')
  .option('-a, --algorithm <algorithm>', 'algorithm for verification.')
  .option('-h, --headers <headers>', 'Headers for the signature.')
  .option('-k, --keyId <keyId>', 'keyId.')
  .option('-s, --signature <signature>', 'Signature.')
  .action(async cmd => {
    try {
      const {algorithm, headers, keyId, signature} = cmd;
      const jsonHeaders = getJsonFile(headers);
      const options = {
        algorithm,
        includeHeaders: jsonHeaders,
        keyId,
        signature
      };
      const result = httpSigs.createAuthzHeader(options);
      console.log(JSON.stringify(result));
    } catch(e) {
      console.error('Error:', JSON.stringify(e, null, e), e);
      process.exit(1);
    }
  });

program
  .command('request')
  .alias('R')
  .option('-r, --request <request>', 'Stringified json request object.')
  .option('-o, --ops <ops>', 'Options for the request.')
  .action(async cmd => {
    try {
      const {request, ops} = cmd;
      if(!request) {
        throw new Error('--request must be a json object.');
      }
      const reqJson = getJsonFile(request);
      const options = ops ? JSON.parse(ops) : undefined;
      const result = httpSigs.parseRequest(reqJson, options);
      console.log(JSON.stringify(result));
    } catch(e) {
      console.error('Error:', JSON.stringify(e, null, e), e);
      process.exit(1);
    }
  });

function getJsonFile(path) {
  const file = fs.readFileSync(path);
  return JSON.parse(file);
}
program.parse(process.argv);
