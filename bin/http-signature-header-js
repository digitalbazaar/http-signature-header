#!/usr/bin/env node

const program = require('commander');
const httpSigs = require('../lib/');
const fs = require('fs');
const httpMessageParser = require('http-message-parser');

program
  .command('c14n')
  .alias('C')
  .action(async httpMessage => {
    // the last string passed to the command is the first arg
    // the second arg will be the cmd
    try {
      const requestOptions = httpMessageParser(httpMessage);
      if(!program.headers) {throw new Error('--headers required');}
      const includeHeaders = program.headers ? program.headers.split(',') : [];
      const result = httpSigs.
        createSignatureString({includeHeaders, requestOptions});
      console.log(result);
      console.log(0);
      process.exit(0);
    } catch(e) {
      console.error(e);
      process.exit(1);
    }
  });

program
  .command('sign')
  .alias('S')
  .option('-a, --algorithm <algorithm>', 'algorithm for verification.')
  .option('-h, --headers <headers>', 'Headers for the signature.')
  .option('-k, --keyId <keyId>', 'keyId.')
  .option('-s, --signature <signature>', 'Signature.')
  .action(async cmd => {
    try {
      const {algorithm, headers, keyId, signature} = cmd;
      const jsonHeaders = getJsonFile(headers);
      const options = {
        algorithm,
        includeHeaders: jsonHeaders,
        keyId,
        signature
      };
      const result = httpSigs.createAuthzHeader(options);
      console.log(JSON.stringify(result));
    } catch(e) {
      console.error('Error:', JSON.stringify(e, null, e), e);
      process.exit(1);
    }
  });

program
  .command('verify')
  .alias('V')
  .option('-r, --request <request>', 'Stringified json request object.')
  .option('-o, --ops <ops>', 'Options for the request.')
  .action(async cmd => {
    try {
      const {request, ops} = cmd;
      if(!request) {
        throw new Error('--request must be a json object.');
      }
      const reqJson = getHttpMessage(request);
      const options = ops ? JSON.parse(ops) : undefined;
      const result = httpSigs.parseRequest(reqJson, options);
      console.log(JSON.stringify(result));
    } catch(e) {
      console.error('Error:', JSON.stringify(e, null, e), e);
      process.exit(1);
    }
  });

function getHttpMessage(path) {
  const messageBuffer = fs.readFileSync(path);
  const parsedMessage = httpMessageParser(messageBuffer);
  return parsedMessage;
}

function getJsonFile(path) {
  const file = fs.readFileSync(path);
  return JSON.parse(file);
}

// all of the common options are accessed
// from program.name i.e. program.headers etc
program
  .version('0.0.1')
  .option('-H, --headers <headers>', 'A list of header names.')
  .option('-k, --keyId <keyId>', 'A Key Id <string>.')
  .option('-pk, --private-key <privateKey>.',
    'A private key file name <filename>.')
  .option('-pkt, --private-key-type <privateKeyType',
    'The type of the private key.')
  .option('-a, --algorithm [algorithm]',
    'One of: rsa-sha1, hmac-sha1, rsa-sha256, hmac-sha256, hs2019.',
    /^(rsa-sha1|hmac-sha1|rsa-sha256|hmac-sha256|hs2019)$/i)
  .option('-c, --created [created]', 'The created param for the signature.')
  .option('-e, --expires [expires]', 'The expires param for the signature.')
  .parse(process.argv);
